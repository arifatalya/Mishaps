import userModel from '../model/userModel.js';
import dotenv from 'dotenv';
import argon2 from 'argon2';
import validator from 'validator';
import crypto from 'crypto';
import { createJwt, verifyJwt} from '../utils/utils.js';

dotenv.config();
const sessions = {};

export const generateSessionId = (userId) => {
    const sessionId = crypto.randomBytes(32).toString('hex');
    sessions[sessionId] = {
        userId,
        createdAt: Date.now(),
        expiresAt: Date.now() + 3600 * 1000,
    };
    return sessionId;
};

export const validateSessionId = (sessionId) => {
    const session = sessions[sessionId];
    if (!session || session.expiresAt < Date.now()) {
        delete sessions[sessionId];
        return null;
    }
    return session;
};

setInterval(() => {
    const now = Date.now();
    Object.keys(sessions).forEach((sessionId) => {
        if (sessions[sessionId].expiresAt < now) {
            delete sessions[sessionId];
        }
    });
}, 60000);

const registerUser = async (req, res) => {
    const { username, email, password } = req.body;

    if (!username || !email || !password) {
        return res.json({ success: false, error: "Username, email, and password are required." });
    }
    if (!validator.isEmail(email)) {
        return res.json({ success: false, error: "Please enter a valid email address." });
    }
    if (password.length < 8) {
        return res.json({ success: false, error: "Password must be at least 8 characters." });
    }

    try {
        const exist = await userModel.findOne({ email });
        if (exist) {
            return res.json({ success: false, error: "User already exists." });
        }

        const hashedPassword = await argon2.hash(password, {
            type: argon2.argon2id,
            memoryCost: 2 ** 16,
            timeCost: 3,
            parallelism: 1,
        });

        const newUser = new userModel({ username, email, password: hashedPassword });
        const user = await newUser.save();

        const token = createJwt(user._id);

        res.json({ success: true, token });
    } catch (error) {
        console.error("Error during registration:", error);
        res.json({ success: false, message: "Error during registration." });
    }
};

const loginUser = async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.json({ success: false, error: "Email and password are required." });
    }
    if (!validator.isEmail(email)) {
        return res.json({ success: false, error: "Please enter a valid email address." });
    }

    try {
        const user = await userModel.findOne({ email });
        if (!user) {
            return res.json({ success: false, message: "User does not exist." });
        }

        if (!user.password.startsWith('$argon2')) {
            return res.json({ success: false, message: "Invalid password format in database." });
        }

        const isMatch = await argon2.verify(user.password, password);
        if (!isMatch) {
            return res.json({ success: false, message: "Invalid credentials." });
        }

        const sessionId = generateSessionId(user._id);
        const token = createJwt(user._id);

        res.cookie('sessionId', sessionId, {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'Strict',
            maxAge: 3600 * 1000,
        });

        res.json({ success: true, token });
    } catch (error) {
        console.error("Error during login:", error);
        res.json({ success: false, message: "Error during login." });
    }
};

const deleteUser = async (req, res) => {
    const userId = req.body.userId;
    const sessionId = req.cookies.sessionId;

    if (!userId || !sessionId || !sessions[sessionId]) {
        return res.status(401).json({ success: false, message: "Unauthorized" });
    }

    try {
        const user = await userModel.findById(userId);

        if (!user) {
            return res.status(404).json({ success: false, error: "User does not exist." });
        }

        delete sessions[sessionId];
        await userModel.deleteOne({ _id: user._id });

        res.json({ success: true, message: "User deleted successfully." });
    } catch (error) {
        console.error("Error deleting user:", error.message);
        res.status(500).json({ success: false, message: "Error deleting user." });
    }
};

const updateUser = async (req, res) => {
    const userId = req.body.userId;
    if (!userId) {
        return res.status(401).json({ success: false, message: "Unauthorized" });
    }

    try {
        const user = await userModel.findById(userId);

        if (!user) {
            return res.status(404).json({ success: false, message: "User does not exist." });
        }

        if (req.body.username) {
            user.username = req.body.username;
        }

        if (req.body.email) {
            if (!validator.isEmail(req.body.email)) {
                return res.status(400).json({ success: false, message: "Invalid email address." });
            }
            user.email = req.body.email;
        }

        if (req.body.password) {
            if (req.body.password.length < 8) {
                return res.status(400).json({ success: false, message: "Password must be at least 8 characters long." });
            }
            user.password = await argon2.hash(req.body.password);
        }

        const updatedUser = await user.save();
        res.json({
            success: true,
            message: "User updated successfully.",
            user: {
                userId: updatedUser._id,
                username: updatedUser.username,
                email: updatedUser.email,
            },
        });
    } catch (error) {
        console.error("Error updating user:", error.message);
        res.status(500).json({ success: false, message: "Error updating user." });
    }
};

const logoutUser = (req, res) => {
    const sessionId = req.cookies.sessionId;

    if (sessionId && sessions[sessionId]) {
        delete sessions[sessionId];
    }

    res.clearCookie('sessionId');
    res.json({ success: true, message: "Logged out successfully." });
};

const authMiddleware = (req, res, next) => {
    const token = req.headers.authorization?.split(" ")[1];
    const sessionId = req.cookies.sessionId;

    if (!token || !sessionId) {
        return res.status(401).json({ success: false, message: "Unauthorized" });
    }

    try {
        const decoded = verifyJwt(token);
        const session = validateSessionId(sessionId);

        if (!session || session.userId !== decoded.id) {
            return res.status(401).json({ success: false, message: "Session expired or invalid." });
        }

        req.body.userId = decoded.id;
        next();
    } catch (error) {
        console.error("Authorization error:", error.message);
        res.status(401).json({ success: false, message: "Unauthorized" });
    }
};

export {
    registerUser,
    loginUser,
    deleteUser,
    updateUser,
    logoutUser,
    authMiddleware
};
